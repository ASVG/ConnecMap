'''
Colorize a flatmap with the mean RGB color of the voxels that are mapped to the same pixel

Lexicon:
    * AIBS: Allen Institute for Brain Science

Assumptions:
    * The annotation nrrd file to be used is CCFv3 2017 Mouse Brain Atlas file to be found here
        http://download.alleninstitute.org/informatics-archive/current-release/mouse_ccf/annotation/ccf_2017/
    * We want to restrict attention to the 43 main isocortical regions listed below
'''

import numpy as np
from PIL import Image  # type: ignore
from typing import List, Optional, Set
from nptyping import NDArray
from tqdm import tqdm
import logging

from voxcell import VoxelData, RegionMap

logging.basicConfig(level=logging.INFO)
L = logging.getLogger(__name__)

# Table of hexadecimal color codes used by ITK-snap for default coloring of voxels
# https://sourceforge.net/p/itk-snap/src/ci/master/tree/Logic/Common/ColorLabelTable.cxx
ITK_SNAP_COLOR_TABLE = [
    "#FF0000",
    "#00FF00",
    "#0000FF",
    "#FFFF00",
    "#00FFFF",
    "#FF00FF",
    "#FFEFD5",
    "#0000CD",
    "#CD853F",
    "#D2B48C",
    "#66CDAA",
    "#000080",
    "#008B8B",
    "#2E8B57",
    "#FFE4E1",
    "#6A5ACD",
    "#DDA0DD",
    "#E9967A",
    "#A52A2A",
    "#FFFAFA",
    "#9370DB",
    "#DA70D6",
    "#4B0082",
    "#FFB6C1",
    "#3CB371",
    "#FFEBCD",
    "#FFE4C4",
    "#DAA520",
    "#008080",
    "#BC8F8F",
    "#FF69B4",
    "#FFDAB9",
    "#DEB887",
    "#7FFF00",
    "#8B4513",
    "#7CFC00",
    "#FFFFE0",
    "#4682B4",
    "#006400",
    "#EE82EE",
    "#EEE8AA",
    "#F0FFF0",
    "#F5DEB3",
    "#B8860B",
    "#20B2AA",
    "#FF1493",
    "#191970",
    "#708090",
    "#228B22",
    "#F8F8FF",
    "#F5FFFA",
    "#FFA07A",
    "#90EE90",
    "#ADFF2F",
    "#4169E1",
    "#FF6347",
    "#FAF0E6",
    "#800000",
    "#32CD32",
    "#F4A460",
    "#FFFFF0",
    "#7B68EE",
    "#FFA500",
    "#ADD8E6",
    "#FFC0CB",
    "#7FFFD4",
    "#FF8C00",
    "#8FBC8F",
    "#DC143C",
    "#FDF5E6",
    "#FFFAF0",
    "#00CED1",
    "#00FF7F",
    "#800080",
    "#FFFACD",
    "#FA8072",
    "#9400D3",
    "#B22222",
    "#FF7F50",
    "#87CEEB",
    "#6495ED",
    "#F0E68C",
    "#FAEBD7",
    "#FFF5EE",
    "#6B8E23",
    "#87CEFA",
    "#00008B",
    "#8B008B",
    "#F5F5DC",
    "#BA55D3",
    "#FFE4B5",
    "#FFDEAD",
    "#00BFFF",
    "#D2691E",
    "#FFF8DC",
    "#2F4F4F",
    "#483D8B",
    "#AFEEEE",
    "#808000",
    "#B0E0E6",
    "#FFF0F5",
    "#8B0000",
    "#F0FFFF",
    "#FFD700",
    "#D8BFD8",
    "#778899",
    "#DB7093",
    "#48D1CC",
    "#FF00FF",
    "#C71585",
    "#9ACD32",
    "#BDB76B",
    "#F0F8FF",
    "#E6E6FA",
    "#00FA9A",
    "#556B2F",
    "#40E0D0",
    "#9932CC",
    "#CD5C5C",
    "#FAFAD2",
    "#5F9EA0",
    "#008000",
    "#FF4500",
    "#E0FFFF",
    "#B0C4DE",
    "#8A2BE2",
    "#1E90FF",
    "#F08080",
    "#98FB98",
    "#A0522D",
]


def hexa_to_rgb(hexa_code: str) -> List[int]:
    return [int(hexa_code[i : (i + 2)], 16) for i in range(1, 6, 2)]


ITK_SNAP_RGB_COLORS = np.array(
    [hexa_to_rgb(hexa_code) for hexa_code in ITK_SNAP_COLOR_TABLE]
)

# The 43 main isocortical regions of the mouse brain
ISOCORTICAL_REGIONS = [
    "FRP",
    "MOp",
    "MOs",
    "SSp-n",
    "SSp-bfd",
    "SSp-ll",
    "SSp-m",
    "SSp-ul",
    "SSp-tr",
    "SSp-un",
    "SSs",
    "GU",
    "VISC",
    "AUDd",
    "AUDp",
    "AUDpo",
    "AUDv",
    "VISal",
    "VISam",
    "VISl",
    "VISp",
    "VISpl",
    "VISpm",
    "VISli",
    "VISpor",
    "ACAd",
    "ACAv",
    "PL",
    "ILA",
    "ORBl",
    "ORBm",
    "ORBvl",
    "AId",
    "AIp",
    "AIv",
    "RSPagl",
    "RSPd",
    "RSPv",
    "VISa",
    "VISrl",
    "TEa",
    "PERI",
    "ECT",
]


def compute_flatmap_image(
    annotation_raw: NDArray[np.uint32], flatmap_raw: NDArray[int]
) -> NDArray[int]:
    """ Compute the image of the flatmap colored with the mean of the default ITK-SNAP RGB voxel colors.

    This function returns an array of shape (W, H, 3) representing the flatmap image
    with RGB colors.

    The RGB color of a pixel is set with the mean of the RGB colors of the voxels that are mapped to this pixel.
    The RGB color of a voxel is the default RGB color code generated by ITK-SNAP when opening an annotated volume.
    This color is determined by the AIBS StructureID of the voxel.
    For instance the AIBS StructureID 1 in the annotated volume is always assigned the red color
    (255, 0, 0), the ID 2 is assigned the green color (0, 255, 0) and the ID 3 is assigned
    the blue color (0, 255, 0). For the rest, colors are picked in a pre-computed 'random' color table with 130
    entries and are assigned cyclically modulo 130:
        rgb_color = ITK_SNAP_COLOR_TABLE[structure_id % 130], see ITK_SNAP_COLOR_TABLE above.

    Args:
       annotation_raw(numpy.ndarray): integer array of (w, h, d, 2) holding the AIBS
        StructureIDs of the annotated brain region of interest.
       flatmap_raw(numpy.ndarray): integer array of shape (w, h, d, 2), to be
         interpreted as a map from a 3D volume to a 2D rectangle image.

    Returns:
        integer numpy.ndarray of shape (W, H, 3) where W and H are
        the maximal values, augmented by 1, of the flatmap with respect to its last axis.
        The last axis of the output array encodes the color of each pixel (x, y) with an RBG
        color vector (r, g, b).
    """
    assert issubclass(flatmap_raw.dtype.type, np.integer)
    in_mask = np.all(flatmap_raw >= 0, axis=-1)
    pixel_coordinates = flatmap_raw[in_mask]

    image_shape = np.max(pixel_coordinates.T, axis=1) + 1
    image = np.zeros(tuple(image_shape) + (3,), dtype=np.uint8)

    annotation_raw = annotation_raw.copy()
    unique_ids = np.unique(annotation_raw[in_mask])
    unique_ids = unique_ids[unique_ids > 0]  # Removes the black label

    annotation_indices = np.array(np.where(in_mask)).T
    fibers_dict = {}
    L.info('Building flatmap fibers ...')
    for voxel_index in tqdm(annotation_indices):
        index = tuple(voxel_index)
        rgb = ITK_SNAP_RGB_COLORS[(annotation_raw[index] - 1) % len(ITK_SNAP_RGB_COLORS)]
        coordinates = tuple(flatmap_raw[index])
        if coordinates in fibers_dict:
            fibers_dict[coordinates].append(rgb)
        else:
            fibers_dict[coordinates] = [rgb]

    L.info('Averaging RGB colors in each flatmap fiber ...')
    for coordinates in tqdm(fibers_dict.keys()):
        rgb_colors = fibers_dict[coordinates]
        mean_color = np.round(np.mean(rgb_colors, axis=0)).astype(np.uint8)
        image[coordinates] = mean_color

    return image


def show_flatmap_image(image: NDArray[int], output_path: Optional[str] = None) -> None:
    img = Image.fromarray(image)
    if output_path is not None:
        img.save(output_path)
    img.show()


def relabel_isocortex_main_regions(
    region_map: 'RegionMap',
    annotation_raw: NDArray[np.uint32],
    copy=False
    ) -> NDArray[np.uint32]:

    if copy:
        annotation_raw = annotation_raw.copy()

    # Uses a unique label of each of the 43 main isocortical regions
    main_isocortical_region_ids: Set[np.uint32] = set()
    for region in ISOCORTICAL_REGIONS:
        ids = region_map.find(region, attr='acronym', with_descendants=True)
        mask = np.isin(annotation_raw, list(ids))
        id_ = next(iter(list(region_map.find(region, attr='acronym'))))
        annotation_raw[mask] = id_
        main_isocortical_region_ids = main_isocortical_region_ids | ids

    # Zeroes every region that is not listed in ISOCORTICAL_REGIONS
    annotation_raw[np.isin(annotation_raw, list(main_isocortical_region_ids), invert=True)] = 0

    return annotation_raw


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description='Colorize a flatmap with the mean RGB color of the voxels that are mapped to the same pixel')
    parser.add_argument('hierarchy_path', help='Path to 1.json or hierarchy.json')
    parser.add_argument('annotation_path', help='Path to the annotation nrrd file')
    parser.add_argument('flatmap_path', help='Path to the flatmap nrrd file')
    parser.add_argument('--output_path', help='Path where to save the colorized flatmap image', default=None)
    args = parser.parse_args()

    region_map = RegionMap.load_json(args.hierarchy_path)
    L.info('Loading annotation ...')
    annotation = VoxelData.load_nrrd(args.annotation_path)
    L.info('Loading flatmap ...')
    flatmap = VoxelData.load_nrrd(args.flatmap_path)

    L.info('Re-labelling isocortex main regions ...')
    annotation_raw = relabel_isocortex_main_regions(region_map, annotation.raw)

    L.info('Computing flatmap colors ...')
    image = compute_flatmap_image(annotation.raw, flatmap.raw)
    show_flatmap_image(image, args.output_path)
